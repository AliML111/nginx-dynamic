load_module modules/ngx_http_js_module.so;
load_module modules/ngx_stream_js_module.so;
worker_processes  auto;
worker_rlimit_nofile 65536;

error_log  /var/log/nginx/error.log notice;
pid        /run/nginx.pid;

events {
    worker_connections  65536;
}
http {
    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  65;
    log_subrequest on;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    ###     log format
    log_format detailed  '$remote_addr - $remote_user [$time_local] "$request" '
                         '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                         '$request_length $request_time [$proxy_host] [$host] $upstream_addr '
                         '$upstream_response_length $upstream_response_time $upstream_status $request_id';
    error_log /dev/stderr warn;
    access_log /dev/stdout detailed;
    
    resolver  1.1.1.1 ipv6=off;
    resolver_timeout 5s;

    js_path "/etc/nginx/njs/";
    js_import handler from api/handler.js;
    js_import post from api/methods/post.js;
    js_import put from api/methods/put.js;
    js_import del from api/methods/del.js;
    js_import get from api/methods/get.js;
    js_import disk from disk.js;
    js_import round_robin from load_balancer/srr.js;
    js_import weighted_round_robin from load_balancer/wrr.js;
    js_import validate from api/validate.js;
    js_shared_dict_zone zone=proxy:10m;
    js_shared_dict_zone zone=proxy1:10m;
    js_shared_dict_zone zone=count_http:1m type=number;
    js_shared_dict_zone zone=count1:1m type=number;
    js_preload_object preloadedUpstreams from /etc/nginx/njs/http_upstreams.js;
    js_set $upstream weighted_round_robin.get_upstream;

    server {
      listen 80;
    set $counter_name "count_http";
      

     location / {
        set $upstream_name "proxy";
        proxy_pass $upstream;
      }
      
      location /api/ {
        js_content handler.api_handler;
      }
      
      
    }

}

# TCP/UDP proxy and load balancing block
#
stream {
    log_format stream '$remote_addr - [$time_local] '
                      '$status $bytes_sent $bytes_received $session_time "$ssl_preread_protocol" "$connection" '
                      '$protocol [$ssl_preread_server_name] $upstream_addr '
                      '$upstream_bytes_sent $upstream_bytes_received $upstream_connect_time $session_time';
    error_log /dev/stderr warn;
    access_log /dev/stdout stream;
    resolver 1.1.1.1 ipv6=off;
    js_path "/etc/nginx/njs/";
    js_import handler from api/handler.js;
    js_import disk from disk.js;
    js_import round_robin from load_balancer/srr.js;
    js_import weighted_round_robin from load_balancer/wrr.js;
    js_import validate from api/validate.js;
    js_shared_dict_zone zone=proxy_stream:10m;
    js_shared_dict_zone zone=count_stream:1m type=number;
    js_preload_object preloadedUpstreams from /etc/nginx/njs/stream_upstreams.js;
    js_set $upstream round_robin.get_upstream;

    server {
    listen 8080;
      set $upstream_name "proxy_stream";
      set $counter_name "count_stream";
      proxy_pass $upstream;
      
    }

    server {
    listen unix:/etc/nginx/dummy.sock;
      set $upstream_name "proxy_stream";
      set $counter_name "count_stream";
      return dummy;
      js_filter disk.readFile;
    }

    server{
      listen unix:/etc/nginx/preload.sock;
      set $upstream_name "proxy_stream";
      set $counter_name "count_stream";
      return preload;
      js_filter disk.preload;
    }

}
